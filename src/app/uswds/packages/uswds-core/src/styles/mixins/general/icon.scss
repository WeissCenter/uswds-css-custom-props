@use "sass:map";
@use "sass:math";

@use "../../settings" as *;
@use "../../functions" as *;
@use "../../variables" as *;
@use "./add-background-svg" as *;
@use "../../css-vars/utilities/functions" as *;

@mixin display-icon($icon, $direction, $size, $margin, $hover) {
  &::#{$direction} {
    @include add-background-svg("#{$icon}");
    background-size: 100%;
    content: "";
    display: inline-block;
    // height: $size;
    height: cssVar($size);
    // width: $size;
    width: cssVar($size);

    /* stylelint-disable block-closing-brace-newline-after, at-rule-empty-line-before */
    @if $direction == "after" {
      margin-left: $margin;
    } @else {
      margin-right: $margin;
    }
    /* stylelint-enable */
  }

  @if $hover == "hover" {
    &:hover::#{$direction} {
      @include add-background-svg("#{$icon}-hover");
    }
  }
}

@mixin remove-icon($direction) {
  &::#{$direction} {
    display: none;
  }
}

@mixin add-icon(
  $icon-name,
  $direction,
  $image-size,
  $container-size,
  $margin,
  $hover
) {
  &::#{$direction} {
    @include add-background-svg("#{$icon-name}");
    background-position: center center;
    background-repeat: no-repeat;
    // background-size: units($image-size);
    background-size: cssVar($image-size);
    content: "";
    display: inline-block;
    // height: units($container-size);
    height: cssVar($container-size);
    // width: units($container-size);
    width: cssVar($container-size);

    /* stylelint-disable block-closing-brace-newline-after, at-rule-empty-line-before */
    @if $direction == "after" {
      // margin-left: units($margin);
      margin-left: cssVar($margin);
    } @else {
      // margin-right: units($margin);
      margin-right: cssVar($margin);
    }
    /* stylelint-enable */
  }

  @if $hover == "hover" {
    &:hover::#{$direction} {
      @include add-background-svg("#{$icon-name}-hover");
    }
  }
}

// New icon mixins using SVG mask technique
//
// $image may be a specific SVG or a list in the form
// ($base, $variant, $variant-alt, $bg)
// the mixin will pick IE11-compatible svgs named
// [base]-[variant].svg based on the specified background-color
//
// @param {Map} - $icon-object - name, svg-height, svg-width, height, container-height, container-width, color, color-variant, color-hover, rotate, path, position-x, position-y
// @param {String} - $contrast-bg - Color token

// CSS Var updates - MZ
// Updating the mixin to use CSS Vars instead of tokens
// In order to maintain the reference to a component's specific CSS vars, we will update the icon object to include the direct CSS var name instead of the base token reference

@mixin add-color-icon($icon-object, $contrast-bg: "default") {
  $filename-base: map.get($icon-object, "name");
  $svg-height: map.get($icon-object, "svg-height");
  $svg-width: map.get($icon-object, "svg-width");
  $aspect: math.div($svg-width, $svg-height);
  // $aspect: calc(cssVar($svg-width) / cssVar($svg-height));
  // $height: if(
  //   math.is-unitless(map.get($icon-object, "height")),
  //   units(map.get($icon-object, "height")),
  //   map.get($icon-object, "height")
  // );
  // $height: if(
  //   math.is-unitless(map.get($icon-object, "height")),
  //   cssVar(map.get($icon-object, "height")),
  //   map.get($icon-object, "height")
  // );
  // $width: $height * $aspect;
  $height: map.get($icon-object, "height");
   // Check to see if the height it a token or a string
  // If token, then we need to add 'usa-spacing' prefix, otherwise pass it straight in
  // Best way i can think to do that right now is to check and see if the value contains the word 'height', if not it's a pre-established USWDS var
  $height: #{$height};
  @if not (str-index($height, "height") or str-index($height, "size")) {
    $height: "spacing-"+ strip-period($height);
  }
  $width: $height;
  // $container-height: if(
  //   map.has-key($icon-object, "container-height"),
  //   units(map.get($icon-object, "container-height")),
  //   null
  // );
  $container-height: if(
    map.has-key($icon-object, "container-height"),
    cssVar(map.get($icon-object, "container-height")),
    null
  );
  // $container-width: if(
  //   map.has-key($icon-object, "container-width"),
  //   units(map.get($icon-object, "container-width")),
  //   null
  // );
  $container-width: if(
    map.has-key($icon-object, "container-width"),
    cssVar(map.get($icon-object, "container-width")),
    null
  );
  $color: if(
    map.has-key($icon-object, "color"),
    map.get($icon-object, "color"),
    "ink"
  );
  $color-variant: if(
    map.has-key($icon-object, "color-variant"),
    map.get($icon-object, "color-variant"),
    "white"
  );
  $color-hover: if(
    map.has-key($icon-object, "color-hover"),
    map.get($icon-object, "color-hover"),
    null
  );
  $rotate: if(
    map.has-key($icon-object, "rotate"),
    map.get($icon-object, "rotate"),
    null
  );
  $path: if(
    map.has-key($icon-object, "path"),
    map.get($icon-object, "path"),
    $theme-image-path
  );
  $position-y: if(
    map.has-key($icon-object, "position-y"),
    map.get($icon-object, "position-y"),
    center
  );
  $position-x: if(
    map.has-key($icon-object, "position-x"),
    map.get($icon-object, "position-x"),
    center
  );
  $ie11-variant: get-color-token-from-bg($contrast-bg, "white", "black");
  $filename-ie11: if(
    $ie11-variant == "white",
    "usa-icons-bg/#{$filename-base}--white.svg",
    "usa-icons/#{$filename-base}.svg"
  );

  background-image: url("#{$path}/#{$filename-ie11}");
  background-repeat: no-repeat;
  background-position: $position-x $position-y;
  // background-size: $width $height;
  // TODO: determine what to do to replicate aspect ratio in CSS Vars
  background-size: cssVar(#{$height});
  display: inline-block;
  height: if($container-height, cssVar(#{$container-height}), cssVar($height));
  width: if($container-width, cssVar(#{$container-width}), cssVar($height));
  @if $rotate {
    transform: rotate($rotate);
  }

  // Mask supported styles
  @supports (mask: url("")) {
    background: none;
    // background-color: if($color == currentColor, $color, color($color));
    background-color: if($color == currentColor, $color, cssVar($color));
    mask-image: url("#{$path}/usa-icons/#{$filename-base}.svg"),
      linear-gradient(transparent, transparent);
    mask-position: $position-x $position-y;
    mask-repeat: no-repeat;
    mask-size: cssVar(#{$height}) cssVar(#{$height});

    @if $color-hover {
      &:hover {
        // background-color: color($color-hover);
        background-color: cssVar($color-hover);
      }
    }
  }
}

// Places an icon before or after an element as an inline-block,
// using the `:before` or `:after` pseudoelements.
@mixin place-icon(
  $icon-object,
  $direction,
  $margin: "auto",
  $vertical-align: middle,
  $contrast-bg: "default"
) {
  $color-hover: if(
    map.has-key($icon-object, "color-hover"),
    map.get($icon-object, "color-hover"),
    null
  );
  &::#{$direction} {
    @include add-color-icon($icon-object, $contrast-bg);
    content: "";
    vertical-align: $vertical-align;

    @if $direction == "after" {
      // margin-left: units($margin);
      margin-left: cssVar($margin);
    } @else {
      // margin-right: units($margin);
      margin-right: cssVar($margin);
    }
  }

  @if $color-hover {
    &:hover::#{$direction} {
      content: ""; // Added to address a weird display bug
      // background-color: color($color-hover);
      background-color: cssVar($color-hover);
    }
  }
}
